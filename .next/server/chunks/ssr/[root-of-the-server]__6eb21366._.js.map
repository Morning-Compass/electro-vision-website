{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/tomek/electro-vision/electro-vision-website/ev-const/api-links.ts"],"sourcesContent":["const rustHost = \"http://localhost:3501\";\nconst pythonHost = \"http://localhost:8000\";\n\nconst ApiLinks = {\n  register: rustHost + \"/auth/register\",\n  loginEmail: rustHost + \"/auth/login/email\",\n  loginUsername: rustHost + \"/auth/login/username\",\n  validateAccount: rustHost + \"/auth/validate/account\",\n  resetPasswordRequest: rustHost + \"/auth/reset/password/\", //token after /\n  resetPassword: rustHost + \"/auth/reset/password\",\n  verifySession: rustHost + \"/auth/validate/session\",\n  createWorkspace: rustHost + \"/workspace/create\",\n  uploadImage: pythonHost + \"/images/upload/\",\n  listWorkspaces: rustHost + \"/workspace/list\",\n  listWorkspaceUsersByWorkspaceIdAndEmail: (id: string) => {\n    return rustHost + \"/workspace/\" + id + \"/users/list\";\n  },\n  listFiles: pythonHost + \"/images/list-files/\",\n  retrieveFiles: pythonHost + \"/images/all-files\",\n  removeFile: pythonHost + \"/images/remove-file\",\n  inviteWorker: rustHost + \"/workspace/invitation/create\",\n  invitationWorkerAccept: (token: string) => {\n    return rustHost + \"/workspace/invitation/accept/\" + token;\n  },\n  listTasks: (id: string) => {\n    return rustHost + \"/workspace/\" + id + \"/tasks/list\";\n  },\n  createTasks: (id: string) => {\n    return rustHost + \"/workspace/\" + id + \"/tasks/create\";\n  },\n} as const;\n\nexport default ApiLinks;\n"],"names":[],"mappings":";;;AAAA,MAAM,WAAW;AACjB,MAAM,aAAa;AAEnB,MAAM,WAAW;IACf,UAAU,WAAW;IACrB,YAAY,WAAW;IACvB,eAAe,WAAW;IAC1B,iBAAiB,WAAW;IAC5B,sBAAsB,WAAW;IACjC,eAAe,WAAW;IAC1B,eAAe,WAAW;IAC1B,iBAAiB,WAAW;IAC5B,aAAa,aAAa;IAC1B,gBAAgB,WAAW;IAC3B,yCAAyC,CAAC;QACxC,OAAO,WAAW,gBAAgB,KAAK;IACzC;IACA,WAAW,aAAa;IACxB,eAAe,aAAa;IAC5B,YAAY,aAAa;IACzB,cAAc,WAAW;IACzB,wBAAwB,CAAC;QACvB,OAAO,WAAW,kCAAkC;IACtD;IACA,WAAW,CAAC;QACV,OAAO,WAAW,gBAAgB,KAAK;IACzC;IACA,aAAa,CAAC;QACZ,OAAO,WAAW,gBAAgB,KAAK;IACzC;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///home/tomek/electro-vision/electro-vision-website/components/templates/PageTemplate.tsx"],"sourcesContent":["\"use client\";\n\nimport useUserContext from \"@/ev-contexts/userContextProvider\";\nimport Link from \"next/link\";\nimport { ReactNode } from \"react\";\n\ntype CleanPageProps = {\n  children: ReactNode;\n  bgClass?: string;\n  allowUnauthenticated?: boolean;\n};\n\nconst PageTemplate = ({\n  children,\n  bgClass,\n  allowUnauthenticated = false,\n}: CleanPageProps) => {\n  const { User } = useUserContext();\n\n  const isUserValid = () => {\n    return !!User.authUser?.id && !!User.authUser?.email;\n  };\n\n  const baseClasses = `bg-center bg-ev-main-bg bg-fixed bg-cover text-ev-text min-h-screen w-screen font-mono gap-5 theme-${User.theme} flex flex-col items-center h-[100vh] ${bgClass || \"\"}`;\n\n  if (allowUnauthenticated || isUserValid()) {\n    return <main className={baseClasses}>{children}</main>;\n  }\n\n  return (\n    <main\n      className={\n        \"bg-ev-main-bg text-ev-secondary text-2xl text-center flex items-center justify-center flex-col w-[100vw] h-[100vh]\"\n      }\n    >\n      <p>You need to be logged in to access this page</p>\n      <Link href={\"/auth/login\"} className=\"text-ev-blue mt-4\">\n        Login here\n      </Link>\n    </main>\n  );\n};\n\nexport default PageTemplate;\n"],"names":[],"mappings":";;;;;;;;;AAGA;AAHA;;;;AAYA,MAAM,eAAe,CAAC,EACpB,QAAQ,EACR,OAAO,EACP,uBAAuB,KAAK,EACb;IACf,MAAM,EAAE,IAAI,EAAE,GAAG;IAEjB,MAAM,cAAc;QAClB,OAAO,CAAC,CAAC,KAAK,QAAQ,EAAE,MAAM,CAAC,CAAC,KAAK,QAAQ,EAAE;IACjD;IAEA,MAAM,cAAc,CAAC,mGAAmG,EAAE,KAAK,KAAK,CAAC,sCAAsC,EAAE,WAAW,IAAI;IAE5L,IAAI,wBAAwB,eAAe;QACzC,qBAAO,6WAAC;YAAK,WAAW;sBAAc;;;;;;IACxC;IAEA,qBACE,6WAAC;QACC,WACE;;0BAGF,6WAAC;0BAAE;;;;;;0BACH,6WAAC,2RAAA,CAAA,UAAI;gBAAC,MAAM;gBAAe,WAAU;0BAAoB;;;;;;;;;;;;AAK/D;uCAEe","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/tomek/electro-vision/electro-vision-website/ev-lib/ElectroVisionFetch.ts"],"sourcesContent":["type TData = string | object | FormData;\ntype TPutData = string | object | FormData | undefined;\ntype THeaders = HeadersInit | undefined;\n\nexport class ElectroVisionFetch {\n  private defaultHeaders = { \"Content-Type\": \"application/json\" };\n\n  private async makeRequest(\n    method: string,\n    endpointUrl: string,\n    data?: TData | TPutData,\n    headers?: THeaders,\n  ): Promise<any> {\n    const isFormData = data instanceof FormData;\n\n    const requestHeaders = isFormData\n      ? new Headers(headers)\n      : new Headers(headers || this.defaultHeaders);\n\n    const body = isFormData\n      ? data\n      : data && typeof data !== \"string\"\n        ? JSON.stringify(data)\n        : data;\n\n    const response = await fetch(endpointUrl, {\n      method,\n      headers: requestHeaders,\n      body,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Request failed with status ${response.status}`;\n      try {\n        const responseData = await response.json();\n        errorMessage = responseData?.response || errorMessage;\n      } catch (e) {\n        console.error(\"Failed to parse json res\");\n        // Failed to parse JSON error response\n      }\n      throw new Error(errorMessage);\n    }\n\n    try {\n      const responseData = await response.json();\n      return responseData.response ?? responseData;\n    } catch (e) {\n      throw new Error(\"Failed to parse JSON response\");\n    }\n  }\n\n  async get(endpointUrl: string, headers?: THeaders): Promise<any> {\n    return this.makeRequest(\"GET\", endpointUrl, undefined, headers);\n  }\n\n  async post(\n    endpointUrl: string,\n    data: TData,\n    headers?: THeaders,\n  ): Promise<any> {\n    return this.makeRequest(\"POST\", endpointUrl, data, headers);\n  }\n\n  async put(\n    endpointUrl: string,\n    data?: TPutData,\n    headers?: THeaders,\n  ): Promise<any> {\n    return this.makeRequest(\"PUT\", endpointUrl, data, headers);\n  }\n\n  async delete(\n    endpointUrl: string,\n    data: TData,\n    headers?: THeaders,\n  ): Promise<any> {\n    return this.makeRequest(\"DELETE\", endpointUrl, data, headers);\n  }\n}\n\nconst OLF = new ElectroVisionFetch();\nexport default OLF;\n"],"names":[],"mappings":";;;;AAIO,MAAM;IACH,iBAAiB;QAAE,gBAAgB;IAAmB,EAAE;IAEhE,MAAc,YACZ,MAAc,EACd,WAAmB,EACnB,IAAuB,EACvB,OAAkB,EACJ;QACd,MAAM,aAAa,gBAAgB;QAEnC,MAAM,iBAAiB,aACnB,IAAI,QAAQ,WACZ,IAAI,QAAQ,WAAW,IAAI,CAAC,cAAc;QAE9C,MAAM,OAAO,aACT,OACA,QAAQ,OAAO,SAAS,WACtB,KAAK,SAAS,CAAC,QACf;QAEN,MAAM,WAAW,MAAM,MAAM,aAAa;YACxC;YACA,SAAS;YACT;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,IAAI,eAAe,CAAC,2BAA2B,EAAE,SAAS,MAAM,EAAE;YAClE,IAAI;gBACF,MAAM,eAAe,MAAM,SAAS,IAAI;gBACxC,eAAe,cAAc,YAAY;YAC3C,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC;YACd,sCAAsC;YACxC;YACA,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI;YACF,MAAM,eAAe,MAAM,SAAS,IAAI;YACxC,OAAO,aAAa,QAAQ,IAAI;QAClC,EAAE,OAAO,GAAG;YACV,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,MAAM,IAAI,WAAmB,EAAE,OAAkB,EAAgB;QAC/D,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,aAAa,WAAW;IACzD;IAEA,MAAM,KACJ,WAAmB,EACnB,IAAW,EACX,OAAkB,EACJ;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,aAAa,MAAM;IACrD;IAEA,MAAM,IACJ,WAAmB,EACnB,IAAe,EACf,OAAkB,EACJ;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,aAAa,MAAM;IACpD;IAEA,MAAM,OACJ,WAAmB,EACnB,IAAW,EACX,OAAkB,EACJ;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,aAAa,MAAM;IACvD;AACF;AAEA,MAAM,MAAM,IAAI;uCACD","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/tomek/electro-vision/electro-vision-website/app/auth/validate/account/%5Btoken%5D/page.tsx"],"sourcesContent":["\"use client\";\n\nimport ApiLinks from \"@/ev-const/api-links\";\nimport { responseKeys } from \"@/ev-const/response-keys\";\nimport PageTemplate from \"@/components/templates/PageTemplate\";\nimport React, { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport OLF from \"@/ev-lib/ElectroVisionFetch\";\n\ntype VerificationToken = string | string[] | undefined;\n\ntype VerifiAccountPageProps = {\n  params: {\n    token: string;\n  };\n};\n\nconst VerifiAccountPage = ({ params }: VerifiAccountPageProps) => {\n  const [apiVerificationToken, setApiVerificationToken] = useState<\n    string | null\n  >(null);\n\n  useEffect(() => {\n    setApiVerificationToken(params.token);\n  }, [params.token]);\n\n  const validateAccount = async () => {\n    return await OLF.put(ApiLinks.validateAccount + `/${apiVerificationToken}`);\n  };\n\n  useEffect(() => {\n    const validate = async () => {\n      try {\n        const response = await validateAccount();\n        console.log(response);\n        toast.success(\"Account validated!\", { duration: 3000 });\n      } catch (error) {\n        console.error(\"Registration error:\", error);\n        toast.error(\n          error instanceof Error ? error.message : \"Account validation failed\",\n          { duration: 5000 },\n        );\n      }\n    };\n\n    if (apiVerificationToken) validate();\n  }, [apiVerificationToken]);\n\n  return (\n    <PageTemplate allowUnauthenticated={true}>\n      <article>Validate your Electro Vision account</article>\n      <article>Token {apiVerificationToken}</article>\n    </PageTemplate>\n  );\n};\n\nexport default VerifiAccountPage;\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AACA;AAPA;;;;;;;AAiBA,MAAM,oBAAoB,CAAC,EAAE,MAAM,EAA0B;IAC3D,MAAM,CAAC,sBAAsB,wBAAwB,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAE7D;IAEF,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QACR,wBAAwB,OAAO,KAAK;IACtC,GAAG;QAAC,OAAO,KAAK;KAAC;IAEjB,MAAM,kBAAkB;QACtB,OAAO,MAAM,+HAAA,CAAA,UAAG,CAAC,GAAG,CAAC,2HAAA,CAAA,UAAQ,CAAC,eAAe,GAAG,CAAC,CAAC,EAAE,sBAAsB;IAC5E;IAEA,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,WAAW;YACf,IAAI;gBACF,MAAM,WAAW,MAAM;gBACvB,QAAQ,GAAG,CAAC;gBACZ,sSAAA,CAAA,UAAK,CAAC,OAAO,CAAC,sBAAsB;oBAAE,UAAU;gBAAK;YACvD,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,uBAAuB;gBACrC,sSAAA,CAAA,UAAK,CAAC,KAAK,CACT,iBAAiB,QAAQ,MAAM,OAAO,GAAG,6BACzC;oBAAE,UAAU;gBAAK;YAErB;QACF;QAEA,IAAI,sBAAsB;IAC5B,GAAG;QAAC;KAAqB;IAEzB,qBACE,6WAAC,wIAAA,CAAA,UAAY;QAAC,sBAAsB;;0BAClC,6WAAC;0BAAQ;;;;;;0BACT,6WAAC;;oBAAQ;oBAAO;;;;;;;;;;;;;AAGtB;uCAEe","debugId":null}}]
}